{"version":3,"sources":["components/column-item.jsx","components/columns-toggler/index.jsx","components/search-bar.jsx","components/no-data-indicaton.jsx","components/grid.jsx","reducers/general.js","reducers/users.js","reducers/index.js","middlewares/common/general.js","middlewares/common/notification.js","middlewares/common/index.js","core/http.js","services/user.js","middlewares/users.js","middlewares/user.js","middlewares/index.js","store.js","utils/action-creator.js","actions/users.js","constants.js","actions/general.js","actions/index.js","pages/users/list.jsx","pages/users/detail.jsx","routes/main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ColumnItem","props","Check","Form","Group","column","checked","key","dataField","type","label","text","name","id","onChange","e","onColumnToggle","ColumnsToggler","useState","open","setOpen","Header","Modal","Title","Body","Footer","columns","toggles","toggle","Button","variant","onClick","size","show","aria-labelledby","centered","as","Row","map","Col","md","SearchBar","Control","InputGroup","className","placeholder","onSearch","target","value","searchText","Append","onClear","NoDataIndication","Grid","searchProps","columnToggleProps","baseProps","pagination","paginationFactory","noDataIndication","rowEvents","init","loading","notification","message","general","state","action","actions","hide","payload","initial","list","ById","users","console","log","fetch","success","clone","user","get","store","next","getState","dispatch","noticiation","setTimeout","logger","url","respponse","json","instance","config","a","http","uri","response","UserService","this","start","service","then","catch","error","finally","common","create","createStore","combineReducers","reduxers","applyMiddleware","thunk","middlewares","UsersList","useSelector","useEffect","row","rowIndex","history","push","Container","fluid","keyField","data","sort","columnToggle","search","displayName","withRouter","UsersDetail","match","params","Label","Card","Object","keys","length","disabled","username","email","phone","website","address","city","zipcode","street","suite","geo","lat","lng","company","catchPhrase","bs","MainRoutes","path","exact","component","UserDetail","App","Navbar","bg","Boolean","window","location","hostname","Root","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySA0BeA,EAvBI,SAAAC,GAAU,IAEjBC,EAAiBC,IAAjBD,MAAOE,EAAUD,IAAVC,MACPC,EAAoBJ,EAApBI,OAAQC,EAAYL,EAAZK,QAMhB,OACI,kBAACF,EAAD,CAAOG,IAAKF,EAAOG,WACf,kBAACN,EAAD,CACIO,KAAK,SACLC,MAAQL,EAAOM,KACfC,KAAMP,EAAOG,UACbK,GAAIR,EAAOG,UACXF,QAASA,EACTQ,SAZK,SAAAC,GACbd,EAAMe,eAAeX,EAAOG,gBC0CrBS,EA/CQ,SAAAhB,GAAU,IAAD,EAEJiB,oBAAS,GAFL,mBAErBC,EAFqB,KAEfC,EAFe,KAGpBC,EAAgCC,IAAhCD,OAAQE,EAAwBD,IAAxBC,MAAOC,EAAiBF,IAAjBE,KAAMC,EAAWH,IAAXG,OACrBC,EAAqCzB,EAArCyB,QAASV,EAA4Bf,EAA5Be,eAAgBW,EAAY1B,EAAZ0B,QAE3BC,EAAS,WACXR,GAAQD,IAGZ,OACI,kBAAC,WAAD,KACI,kBAACU,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAASH,GAAhC,aACA,kBAACN,EAAA,EAAD,CACIU,KAAK,KACLC,KAAMd,EACNe,kBAAgB,gCAChBC,UAAQ,GAER,kBAACd,EAAD,KACI,kBAACE,EAAD,CAAOV,GAAG,iCAAV,YAIJ,kBAACW,EAAD,CAAMY,GAAIC,KAELX,EAAQY,KAAI,SAAAjC,GACT,OACI,kBAACkC,EAAA,EAAD,CAAKC,GAAI,EAAGjC,IAAKF,EAAOG,WACpB,kBAAC,EAAD,CACIH,OAAQA,EACRC,QAASqB,EAAQtB,EAAOG,WACxBQ,eAAgBA,SAOpC,kBAACS,EAAD,KACI,kBAACI,EAAA,EAAD,CAAQE,QAASH,GAAjB,a,SCZLa,EA7BG,SAAAxC,GAAU,IAEhByC,EAAYvC,IAAZuC,QAUR,OACI,kBAACC,EAAA,EAAD,CAAYC,UAAU,QAClB,kBAACF,EAAD,CACIjC,KAAK,OACLoC,YAAY,SACZ/B,SAbK,SAAAC,GACbd,EAAM6C,SAAS/B,EAAEgC,OAAOC,OAAS,KAazBA,MAAO/C,EAAMgD,aAEhBhD,EAAMgD,YACP,kBAACN,EAAA,EAAWO,OAAZ,KACI,kBAACrB,EAAA,EAAD,CAAQC,QAAQ,SAAUC,QAdxB,WACV9B,EAAMkD,YAaE,Q,oCCbDC,EAVU,kBACrB,yBAAKR,UAAU,WACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UACf,yBAAKA,UAAU,YCsBRS,EAtBF,SAAApD,GACT,OACI,kBAAC,WAAD,KACI,kBAACoC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,kBAAC,EAActC,EAAMqD,cAEzB,kBAACf,EAAA,EAAD,KACI,kBAAC,EAAmBtC,EAAMsD,qBAGlC,kBAAC,IAAD,iBACQtD,EAAMuD,UADd,CAEIZ,UAAU,2BACVa,WAAYC,MACZC,iBAAkB,kBAAM,kBAAC,EAAD,OACxBC,UAAW3D,EAAM2D,WAAa,Q,gCCtBxCC,EAAO,CACTC,SAAS,EACTC,aAAc,CACVtD,KAAM,GACNuD,QAAS,KA+BFC,EA3BC,WAA2B,IAA1BC,EAAyB,uDAAjBL,EAAMM,EAAW,uCACtC,OAAQA,EAAO1D,MACX,KAAK2D,GAAQH,QAAQH,QAAQ7B,KAAKxB,KAC9B,OAAO,eACAyD,EADP,CAEIJ,SAAS,IAEjB,KAAKM,GAAQH,QAAQH,QAAQO,KAAK5D,KAC9B,OAAO,eACAyD,EADP,CAEIJ,SAAS,IAEjB,KAAKM,GAAQH,QAAQF,aAAa9B,KAAKxB,KACnC,OAAO,eACAyD,EADP,CAEIH,aAAa,eAAKI,EAAOG,WAEjC,KAAKF,GAAQH,QAAQF,aAAaM,KAAK5D,KACnC,OAAO,eACAyD,EADP,CAEIH,aAAa,eAAKF,EAAKE,gBAE/B,QACI,OAAOG,I,yBC9BbK,EAAU,CACZC,KAAM,GACNC,KAAM,ICFK,GACXR,UACAS,MDGU,WAA8B,IAA7BR,EAA4B,uDAApBK,EAASJ,EAAW,uCAC/B1D,EAAkB0D,EAAlB1D,KAAM6D,EAAYH,EAAZG,QAEd,OADAK,QAAQC,IAAI,aAAcN,GAClB7D,GACJ,KAAK2D,GAAQM,MAAMF,KAAKK,MAAMC,QAAQrE,KAClC,OAAO,eACAyD,EADP,CAEIM,KAAMO,IAAMT,KAEpB,KAAKF,GAAQY,KAAKC,IAAIH,QAAQrE,KAC1B,OAAO,eACAyD,EADP,CAEIO,KAAK,eACEP,EAAMO,KADT,eAECH,EAAQzD,GAAKkE,IAAMT,OAIpC,OAAOJ,I,SEZID,EAZC,SAAAiB,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAhB,GAE7B,IAAML,EAAUoB,EAAME,WAAWnB,QAAQH,QAOzC,OANIK,EAAO1D,OAAS2D,GAAQH,QAAQH,QAAQlC,OAAOnB,OAC/CqD,EACIM,GAAQH,QAAQH,QAAQO,KAAKgB,WAC7BjB,GAAQH,QAAQH,QAAQ7B,KAAKoD,YAG9BF,EAAKhB,MCWDmB,EApBK,SAAAJ,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAhB,GACjC,IAAMD,EAAQgB,EAAME,WACZ3E,EAAkB0D,EAAlB1D,KAAM6D,EAAYH,EAAZG,QAed,OAbI7D,IAAS2D,GAAQH,QAAQF,aAAanC,OAAOnB,OAEzCyD,EAAMD,QAAQF,aAAatD,KAC3B2D,GAAQH,QAAQF,aAAaM,KAAKgB,YAElCjB,GAAQH,QAAQF,aAAa9B,KAAKoD,SAASf,GAC3CiB,YAAW,WACPnB,GAAQH,QAAQF,aAAaM,KAAKgB,aACnC,OAKJF,EAAKhB,MCfD,G,OACXqB,EACAvB,EACAF,G,0CCUW,G,OAAA,I,qIAVD0B,G,yHAAY,G,kBAEUZ,MAAMY,G,cAAxBC,E,yBACCA,EAAUC,Q,oKC4BdC,EADE,IA7Bb,WAAYC,GAAS,IAAD,OAOhB,OAPgB,yBAUpBrB,KAVoB,sBAUb,4BAAAsB,EAAA,+EAEwBC,EAAKd,IAAI,EAAKe,KAFtC,cAEOC,EAFP,yBAGQA,GAHR,sCAKQ,KAAMA,UAAY,KAAMjC,QALhC,yDAVa,KAmBpBiB,IAnBoB,uCAmBd,WAAMpE,GAAN,eAAAiF,EAAA,+EAEyBC,EAAKd,IAAL,UAAY,EAAKe,IAAjB,YAAwBnF,IAFjD,cAEQoF,EAFR,yBAGSA,GAHT,sCAKS,KAAMA,UAAY,KAAMjC,QALjC,yDAnBc,sDACXkC,EAAYN,WACbM,EAAYN,SAAWO,MAI3BA,KAAKH,IAAM,4CACJE,EAAYN,SAsBV,CAnCF,ICeAlB,EAdD,SAAAQ,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAhB,GAAW,IAE9B1D,EAAkB0D,EAAlB1D,KAAkB0D,EAAZG,QACd,GAAI7D,IAAS2D,GAAQM,MAAMF,KAAKK,MAAMuB,MAAM3F,KACxC,OAAO0E,EAAKhB,GAGhBC,GAAQH,QAAQH,QAAQlC,OAAOyD,WAC/BgB,EAAQ7B,OACH8B,KAAKlC,GAAQM,MAAMF,KAAKK,MAAMC,QAAQO,UACtCkB,MAAMnC,GAAQM,MAAMF,KAAKK,MAAM2B,MAAMnB,UACrCoB,QAAQrC,GAAQH,QAAQH,QAAQlC,OAAOyD,aCSjCL,EApBF,SAAAE,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAhB,GAAW,IAE7B1D,EAAkB0D,EAAlB1D,KAAM6D,EAAYH,EAAZG,QACd,OAAI7D,IAAS2D,GAAQY,KAAKC,IAAImB,MAAM3F,MAItByE,EAAME,WACVV,MAAMD,KAAKH,GAJVa,EAAKhB,IAQhBC,GAAQH,QAAQH,QAAQlC,OAAOyD,gBAC/BgB,EAAQpB,IAAIX,GACPgC,KAAKlC,GAAQY,KAAKC,IAAIH,QAAQO,UAC9BkB,MAAMnC,GAAQY,KAAKC,IAAIuB,MAAMnB,UAC7BoB,QAAQrC,GAAQH,QAAQH,QAAQlC,OAAOyD,cCflC,wBACPqB,GADP,CAEIhC,EACAM,I,UCEAE,GAAQ,GAWGyB,GAVA,SAACzC,GAMZ,OALAgB,GAAQ0B,YACJC,YAAgBC,GAChB5C,EACA6C,IAAe,WAAf,GAAoBC,MAApB,mBAA8BC,OCAvBN,GAZA,SAAClG,GACZ,MAAO,CACHA,OACA4E,SAAU,SAACf,GACPY,GAAMG,SAAS,CACX5E,OACA6D,eCED,IACXI,MAAO,CACHF,KAAM,CACFK,MAAO,CACHuB,MAAOO,GCPS,oBDQhB7B,QAAS6B,GCPe,sBDQxBH,MAAOG,GCPe,6BDWlC3B,KAAM,CACFC,IAAK,CACDmB,MAAOO,GCXM,YDYb7B,QAAS6B,GCXW,oBDYpBH,MAAOG,GCXW,qBCHf,IACX1C,QAAS,CACLH,QAAS,CACL7B,KAAM0E,GDXU,gBCYhBtC,KAAMsC,GDdU,gBCehB/E,OAAQ+E,GDXU,mBCatB5C,aAAc,CACV9B,KAAM0E,GDfe,qBCgBrBtC,KAAMsC,GDlBe,qBCmBrB/E,OAAQ+E,GDfe,0BEFpB,kBACR1C,GADP,GAEOS,ICIDwC,GAAY,SAAAjH,GAEd,IAAMyE,EAAQyC,aAAY,SAAAjD,GAAK,OAAIA,EAAMQ,MAAMF,QAE/C4C,qBAAU,WACNhD,GAAQM,MAAMF,KAAKK,MAAMuB,MAAMf,aAChC,IAEH,IAAMtD,EAAU,SAAChB,EAAGsG,EAAKC,GACrBrH,EAAMsH,QAAQC,KAAK,IAAMH,EAAIxG,KA0DjC,OACI,kBAAC4G,EAAA,EAAD,CAAWC,OAAK,GAEZ,kBAACrF,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,wBAAIK,UAAU,2BAAd,WAGR,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,CACIoF,SAAS,KACTC,KAAMlD,EACNhD,QApEJ,CAAC,CACblB,UAAW,KACXG,KAAM,KACNkH,MAAM,GACP,CACCrH,UAAW,OACXG,KAAM,OACNkH,MAAM,GACP,CACCrH,UAAW,WACXG,KAAM,YACNkH,MAAM,GACP,CACCrH,UAAW,QACXG,KAAM,QACNkH,MAAM,GACP,CACCrH,UAAW,iBACXG,KAAM,SACNkH,MAAM,GACP,CACCrH,UAAW,gBACXG,KAAM,QACNkH,MAAM,GACP,CACCrH,UAAW,eACXG,KAAM,OACNkH,MAAM,GACP,CACCrH,UAAW,kBACXG,KAAM,WACNkH,MAAM,GACP,CACCrH,UAAW,QACXG,KAAM,WACNkH,MAAM,GACP,CACCrH,UAAW,UACXG,KAAM,UACNkH,MAAM,GACP,CACCrH,UAAW,eACXG,KAAM,eACNkH,MAAM,GACP,CACCrH,UAAW,sBACXG,KAAM,uBACNkH,MAAM,GACP,CACCrH,UAAW,aACXG,KAAM,KACNkH,MAAM,IAkBUC,cAAY,EACZC,QAAM,IAEL,SAAA9H,GAAK,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAiB2D,UAAW,CAAE7B,qBAShEmF,GAAUc,YAAc,YACTC,mBAAWf,I,UC1FpBgB,GAAc,SAAAjI,GAEhB,IAAM+E,EAAOmC,aAAY,SAAAjD,GAAK,OAAIA,EAAMQ,MAAMD,KAAKxE,EAAMkI,MAAMC,OAAOvH,OAElET,EAGAD,IAHAC,MACAsC,EAEAvC,IAFAuC,QACA2F,EACAlI,IADAkI,MAGeC,KAAXjH,OAMR,OAJA+F,qBAAU,WACNhD,GAAQY,KAAKC,IAAImB,MAAMf,SAASpF,EAAMkI,MAAMC,OAAOvH,MACpD,CAACZ,EAAMkI,MAAMC,OAAOvH,MAElBmE,GAAQuD,OAAOC,KAAKxD,GAAMyD,QAAU,EAC9B,KAKP,kBAAChB,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACrF,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,wBAAIK,UAAU,2BAAd,UAGR,kBAAC0F,GAAA,EAAD,CAAM1F,UAAU,QACZ,kBAAC0F,GAAA,EAAK9G,KAAN,KACI,kBAAC8G,GAAA,EAAK/G,MAAN,6BACA,kBAACnB,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,gBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAKpE,KAAM8H,UAAQ,KAGvC,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,oBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK2D,SAAUD,UAAQ,KAG3C,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,iBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK4D,MAAOF,UAAQ,KAGxC,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,iBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK6D,MAAOH,UAAQ,KAGxC,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,mBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK8D,QAASJ,UAAQ,OAIlD,kBAACJ,GAAA,EAAD,CAAM1F,UAAU,QACZ,kBAAC0F,GAAA,EAAK9G,KAAN,KACI,kBAAC8G,GAAA,EAAK/G,MAAN,4BACA,kBAACnB,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,gBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK+D,QAAQC,KAAMN,UAAQ,KAE/C,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,mBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK+D,QAAQE,QAASP,UAAQ,KAElD,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,kBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK+D,QAAQG,OAAQR,UAAQ,KAEjD,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,iBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK+D,QAAQI,MAAOT,UAAQ,KAEhD,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,oBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK+D,QAAQK,IAAIC,IAAKX,UAAQ,KAElD,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,qBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAK+D,QAAQK,IAAIE,IAAKZ,UAAQ,OAI1D,kBAACJ,GAAA,EAAD,KACI,kBAACA,GAAA,EAAK9G,KAAN,KACI,kBAAC8G,GAAA,EAAK/G,MAAN,4BAEA,kBAACnB,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,gBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAKuE,QAAQ3I,KAAM8H,UAAQ,KAE/C,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,wBACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAKuE,QAAQC,YAAad,UAAQ,KAEtD,kBAACtI,EAAD,CAAOgC,GAAIG,IAAKC,GAAI,GAChB,kBAAC6F,EAAD,cACA,kBAAC3F,EAAD,CAASM,MAAOgC,EAAKuE,QAAQE,GAAIf,UAAQ,SAQjER,GAAYF,YAAc,cACXC,mBAAWC,ICpHpBwB,GAAa,WACf,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3C,KACjC,kBAAC,IAAD,CAAOyC,KAAK,OAAOC,OAAK,EAACC,UAAWC,OAKhDJ,GAAW1B,YAAc,aACV0B,UCGAK,I,OAZH,WAEV,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOnI,QAAQ,OAAOc,UAAU,cAA3C,YAGA,kBAAC,GAAD,SCDcsH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlC,MACvB,2D,yBCNAjD,GAAQyB,GAAO,IAEf2D,GAAO,WACT,OACI,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUrF,MAAOA,IACf,kBAAC,GAAD,SAMZsF,IAASC,OACP,kBAAC,GAAD,MACAC,SAASC,eAAe,SDyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdzE,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMxC,c","file":"static/js/main.6a2e68f2.chunk.js","sourcesContent":["import React from 'react';\nimport { Form } from \"react-bootstrap\";\n\nconst ColumnItem = props => {\n\n    const { Check, Group } = Form\n    const { column, checked } = props;\n\n    const onChange = e => {\n        props.onColumnToggle(column.dataField);\n    }\n\n    return (\n        <Group key={column.dataField}>\n            <Check\n                type=\"switch\"\n                label={ column.text }\n                name={column.dataField}\n                id={column.dataField}\n                checked={checked}\n                onChange={onChange}\n            />\n        </Group>\n    )\n}\n\nexport default ColumnItem;","import React, { Fragment, useState } from 'react';\nimport { Modal, Button, Row, Col } from 'react-bootstrap';\nimport Item from '../column-item';\n\nconst ColumnsToggler = props => {\n\n    const [open, setOpen] = useState(false);\n    const { Header, Title, Body, Footer } = Modal;\n    const { columns, onColumnToggle, toggles } = props;\n\n    const toggle = () => {\n        setOpen(open ? false: true);\n    }\n\n    return (\n        <Fragment>\n            <Button variant=\"dark\" onClick={toggle}>Customize</Button>\n            <Modal\n                size=\"md\"\n                show={open}\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Header>\n                    <Title id=\"contained-modal-title-vcenter\">\n                        Columns\n                    </Title>\n                </Header>\n                <Body as={Row}>\n\n                    {columns.map(column => {\n                        return (\n                            <Col md={6} key={column.dataField}>\n                                <Item\n                                    column={column}\n                                    checked={toggles[column.dataField]}\n                                    onColumnToggle={onColumnToggle}\n                                />\n                            </Col>\n                        )\n                    })}\n\n                </Body>\n                <Footer>\n                    <Button onClick={toggle}>Close</Button>\n                </Footer>\n            </Modal>\n        </Fragment>\n    );\n}\n\nexport default ColumnsToggler;\n","import React from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\n\nconst SearchBar = props => {\n\n    const { Control } = Form;\n\n    const onChange = e => {\n        props.onSearch(e.target.value || '')\n    }\n\n    const clear = () => {\n        props.onClear();\n    }\n\n    return (\n        <InputGroup className=\"mb-3\">\n            <Control\n                type=\"text\"\n                placeholder=\"Search\"\n                onChange={onChange}\n                value={props.searchText}\n            />\n            {props.searchText &&\n            <InputGroup.Append>\n                <Button variant=\"danger\"  onClick={clear}>x</Button>\n            </InputGroup.Append>\n            }\n        </InputGroup>\n    )\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst NoDataIndication = () => (\n    <div className=\"spinner\">\n        <div className=\"rect1\" />\n        <div className=\"rect2\" />\n        <div className=\"rect3\" />\n        <div className=\"rect4\" />\n        <div className=\"rect5\" />\n    </div>\n);\n\nexport default NoDataIndication;","import React, { Fragment } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport ColumnsToggler from \"./columns-toggler\";\nimport SearchBar from \"./search-bar\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport NoDataIndication from \"./no-data-indicaton\";\n\nconst Grid = props => {\n    return (\n        <Fragment>\n            <Row>\n                <Col>\n                    <SearchBar {...props.searchProps} />\n                </Col>\n                <Col>\n                    <ColumnsToggler {...props.columnToggleProps} />\n                </Col>\n            </Row>\n            <BootstrapTable\n                {...props.baseProps}\n                className=\"table-striped table-dark\"\n                pagination={paginationFactory()}\n                noDataIndication={() => <NoDataIndication />}\n                rowEvents={props.rowEvents || {}}\n            />\n        </Fragment>\n    )\n}\n\nexport default Grid;","import actions from '../actions';\n\nconst init = {\n    loading: false,\n    notification: {\n        type: '',\n        message: ''\n    }\n}\n\nconst general = (state = init, action) => {\n    switch (action.type) {\n        case actions.general.loading.show.type:\n            return {\n                ...state,\n                loading: true\n            }\n        case actions.general.loading.hide.type:\n            return {\n                ...state,\n                loading: false\n            }\n        case actions.general.notification.show.type:\n            return {\n                ...state,\n                notification: {...action.payload}\n            }\n        case actions.general.notification.hide.type:\n            return {\n                ...state,\n                notification: {...init.notification}\n            }\n        default:\n            return state\n    }\n}\n\nexport default general;","import { clone } from '../utils/clone';\nimport actions from '../actions';\n\nconst initial = {\n    list: [],\n    ById: {}\n}\n\nconst users = (state = initial, action) => {\n    const { type, payload } = action;\n    console.log(\"payload : \", payload)\n    switch (type) {\n        case actions.users.list.fetch.success.type:\n            return {\n                ...state,\n                list: clone(payload)\n            }\n        case actions.user.get.success.type:\n            return {\n                ...state,\n                ById: {\n                    ...state.ById,\n                    [payload.id]: clone(payload)\n                }\n            }\n    }\n    return state;\n}\n\nexport default users;","import general from './general'\nimport users from './users';\n\nexport default {\n    general,\n    users\n}","import actions from '../../actions';\n\nconst general = store => next => action => {\n\n    const loading = store.getState().general.loading;\n    if (action.type === actions.general.loading.toggle.type) {\n        loading ?\n            actions.general.loading.hide.dispatch():\n            actions.general.loading.show.dispatch();\n    }\n\n    return next(action);\n}\n\nexport default general;","import actions from \"../../actions\";\n\nconst noticiation = store => next => action => {\n    const state = store.getState();\n    const { type, payload } = action;\n\n    if (type === actions.general.notification.toggle.type) {\n\n        if (state.general.notification.type) {\n            actions.general.notification.hide.dispatch();\n        } else {\n            actions.general.notification.show.dispatch(payload);\n            setTimeout(() => {\n                actions.general.notification.hide.dispatch();\n            }, 2000)\n        }\n\n    }\n\n    return next(action);\n}\n\nexport default noticiation;","import logger from 'redux-logger';\nimport general from './general';\nimport notification from './notification';\n\nexport default [\n    logger,\n    general,\n    notification\n];","import axios from \"axios\";\nimport { tokenInterceptor, successInterceptor, errorInterceptor } from \"./interceptor\";\n\nlet instance = null;\n\nclass Http {\n\n    async get(url, conf = {}) {\n        try {\n            const respponse = await fetch(url);\n            return respponse.json();\n        } catch (err) {\n            throw err;\n        }\n    }\n}\n\nexport default new Http();\n","import http from '../core/http';\n//import config from '../config';\nconst config = {};\n\nclass UserService {\n\n    static instance;\n\n    constructor(config) {\n        if (!UserService.instance) {\n            UserService.instance = this;\n        }\n\n        //this.uri = config.api.url + '/users';\n        this.uri = 'http://jsonplaceholder.typicode.com/users'\n        return UserService.instance;\n    }\n\n    list = async () => {\n        try {\n            const response = await http.get(this.uri);\n            return response;\n        } catch (error) {\n            throw (error.response || error.message);\n        }\n    }\n\n    get = async id => {\n        try {\n            const response = await http.get(`${this.uri}/${id}`);\n            return response;\n        } catch (error) {\n            throw (error.response || error.message);\n        }\n    }\n}\n\nconst instance = new UserService(config);\nexport default instance;\n","import service from '../services/user';\nimport actions from '../actions';\n\nconst users = store => next => action => {\n\n    const { type, payload } = action;\n    if (type !== actions.users.list.fetch.start.type) {\n        return next(action);\n    }\n\n    actions.general.loading.toggle.dispatch()\n    service.list()\n        .then(actions.users.list.fetch.success.dispatch)\n        .catch(actions.users.list.fetch.error.dispatch)\n        .finally(actions.general.loading.toggle.dispatch)\n}\n\nexport default users;","import actions from '../actions';\nimport service from '../services/user';\n\nconst user = store => next => action => {\n\n    const { type, payload } = action;\n    if (type !== actions.user.get.start.type) {\n        return next(action);\n    }\n\n    const state = store.getState();\n    if (state.users.ById[payload]) {\n        return next(action);\n    }\n\n    actions.general.loading.toggle.dispatch();\n    service.get(payload)\n        .then(actions.user.get.success.dispatch)\n        .catch(actions.user.get.error.dispatch)\n        .finally(actions.general.loading.toggle.dispatch)\n\n}\n\nexport default user;","import common from './common';\nimport users from './users';\nimport user from './user';\n\nexport default [\n    ...common,\n    users,\n    user\n]","import {\n    createStore,\n    applyMiddleware,\n    combineReducers\n} from 'redux';\nimport reduxers from './reducers';\nimport middlewares from './middlewares';\nimport thunk from 'redux-thunk';\n\nlet store = {};\nconst create = (state) => {\n    store = createStore(\n        combineReducers(reduxers),\n        state,\n        applyMiddleware(...[thunk, ...middlewares])\n    )\n    return store;\n};\n\n\nexport default create;\nexport { store }","import { store } from '../store';\n\nconst create = (type) => {\n    return {\n        type,\n        dispatch: (payload) => {\n            store.dispatch({\n                type,\n                payload\n            })\n        }\n    }\n}\n\nexport default create;","import create from '../utils/action-creator'\nimport {\n    USERS_LIST_FETCH,\n    USERS_LIST_FETCH_SUCCESS,\n    USERS_LIST_FETCH_ERROR,\n    USER_GET,\n    USER_GET_SUCCESS,\n    USER_GET_ERROR\n} from '../constants';\n\nexport default {\n    users: {\n        list: {\n            fetch: {\n                start: create(USERS_LIST_FETCH),\n                success: create(USERS_LIST_FETCH_SUCCESS),\n                error: create(USERS_LIST_FETCH_ERROR)\n            }\n        }\n    },\n    user: {\n        get: {\n            start: create(USER_GET),\n            success: create(USER_GET_SUCCESS),\n            error: create(USER_GET_ERROR)\n        }\n    }\n}","export const HIDE_LOADING = 'HIDE_LOADING';\nexport const HIDE_NOTIFICATION = 'HIDE_NOTIFICATION';\nexport const SHOW_LOADING = 'SHOW_LOADING';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const TOGGLE_LOADING = 'TOGGLE_LOADING';\nexport const TOGGLE_NOTIFICATION = 'TOGGLE_NOTIFICATION';\n\nexport const USERS_LIST_FETCH = 'USERS_LIST_FETCH';\nexport const USERS_LIST_FETCH_SUCCESS = 'USERS_LIST_FETCHED';\nexport const USERS_LIST_FETCH_ERROR = 'USERS_LIST_FETCH_ERROR';\n\nexport const  USER_GET = 'USER_GET';\nexport const USER_GET_SUCCESS = 'USER_GET_SUCCESS';\nexport const USER_GET_ERROR = 'USER_GET_ERROR';","import create from '../utils/action-creator'\nimport {\n    HIDE_LOADING,\n    HIDE_NOTIFICATION,\n    SHOW_LOADING,\n    SHOW_NOTIFICATION,\n    TOGGLE_LOADING,\n    TOGGLE_NOTIFICATION\n} from \"../constants\";\n\nexport default {\n    general: {\n        loading: {\n            show: create(SHOW_LOADING),\n            hide: create(HIDE_LOADING),\n            toggle: create(TOGGLE_LOADING)\n        },\n        notification: {\n            show: create(SHOW_NOTIFICATION),\n            hide: create(HIDE_NOTIFICATION),\n            toggle: create(TOGGLE_NOTIFICATION)\n        }\n    }\n}","import users from './users';\nimport general from './general';\n\nexport default {\n    ...general,\n    ...users\n}","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport ToolkitProvider, { ColumnToggle, Search } from 'react-bootstrap-table2-toolkit';\nimport Grid from '../../components/grid';\nimport { useSelector } from \"react-redux\";\nimport actions from '../../actions';\n\nconst UsersList = props => {\n\n    const users = useSelector(state => state.users.list);\n\n    useEffect(() => {\n        actions.users.list.fetch.start.dispatch();\n    }, [])\n\n    const onClick = (e, row, rowIndex) => {\n        props.history.push('/' + row.id);\n    }\n\n    const columns = [{\n        dataField: 'id',\n        text: 'ID',\n        sort: true\n    }, {\n        dataField: 'name',\n        text: 'Name',\n        sort: true\n    }, {\n        dataField: 'username',\n        text: 'User Name',\n        sort: true\n    }, {\n        dataField: 'email',\n        text: 'Email',\n        sort: true\n    }, {\n        dataField: 'address.street',\n        text: 'Street',\n        sort: true\n    }, {\n        dataField: 'address.suite',\n        text: 'Suite',\n        sort: true\n    }, {\n        dataField: 'address.city',\n        text: 'City',\n        sort: true\n    }, {\n        dataField: 'address.zipcode',\n        text: 'Zip Code',\n        sort: true\n    }, {\n        dataField: 'phone',\n        text: 'Phone No',\n        sort: true\n    }, {\n        dataField: 'website',\n        text: 'Website',\n        sort: true\n    }, {\n        dataField: 'company.name',\n        text: 'Company name',\n        sort: true\n    }, {\n        dataField: 'company.catchPhrase',\n        text: 'Company Catch Phrase',\n        sort: true\n    }, {\n        dataField: 'company.bs',\n        text: 'BS',\n        sort: true\n    }];\n\n\n    return (\n        <Container fluid>\n            \n            <Row>\n                <Col>\n                    <h3 className=\"border-bottom py-2 mb-5\">USERS</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <ToolkitProvider\n                        keyField='id'\n                        data={users}\n                        columns={columns}\n                        columnToggle\n                        search\n                    >\n                        {props => <Grid {...props} rowEvents={{ onClick }} />}\n                    </ToolkitProvider>\n                </Col>\n            </Row>\n        </Container>\n\n    )\n}\n\nUsersList.displayName = 'UsersList';\nexport default withRouter(UsersList);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n    Container,\n    Form,\n    Row,\n    Col,\n    Card\n} from 'react-bootstrap';\nimport { useSelector } from \"react-redux\";\nimport actions from '../../actions';\n\nconst UsersDetail = props => {\n\n    const user = useSelector(state => state.users.ById[props.match.params.id])\n    const {\n        Group,\n        Control,\n        Label\n    } = Form;\n\n    const { Header } = Card;\n\n    useEffect(() => {\n        actions.user.get.start.dispatch(props.match.params.id)\n    }, [props.match.params.id])\n\n    if (!user || Object.keys(user).length <= 0) {\n        return null;\n    }\n\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col>\n                    <h3 className=\"border-bottom py-2 mb-5\">USER</h3>\n                </Col>\n            </Row>\n            <Card className=\"mb-3\">\n                <Card.Body>\n                    <Card.Title>Personal Information</Card.Title>\n                    <Group as={Col} md={3}>\n                        <Label>Name : </Label>\n                        <Control value={user.name} disabled />\n                    </Group>\n\n                    <Group as={Col} md={3}>\n                        <Label>Username : </Label>\n                        <Control value={user.username} disabled />\n                    </Group>\n\n                    <Group as={Col} md={3}>\n                        <Label>Email : </Label>\n                        <Control value={user.email} disabled />\n                    </Group>\n\n                    <Group as={Col} md={3}>\n                        <Label>Phone : </Label>\n                        <Control value={user.phone} disabled />\n                    </Group>\n\n                    <Group as={Col} md={3}>\n                        <Label>Website : </Label>\n                        <Control value={user.website} disabled />\n                    </Group>\n                </Card.Body>\n            </Card>\n            <Card className=\"mb-3\">\n                <Card.Body>\n                    <Card.Title>Address Information</Card.Title>\n                    <Group as={Col} md={3}>\n                        <Label>City : </Label>\n                        <Control value={user.address.city} disabled />\n                    </Group>\n                    <Group as={Col} md={3}>\n                        <Label>Zipcode : </Label>\n                        <Control value={user.address.zipcode} disabled />\n                    </Group>\n                    <Group as={Col} md={3}>\n                        <Label>Street : </Label>\n                        <Control value={user.address.street} disabled />\n                    </Group>\n                    <Group as={Col} md={3}>\n                        <Label>Suite : </Label>\n                        <Control value={user.address.suite} disabled />\n                    </Group>\n                    <Group as={Col} md={3}>\n                        <Label>LAtitude : </Label>\n                        <Control value={user.address.geo.lat} disabled />\n                    </Group>\n                    <Group as={Col} md={3}>\n                        <Label>Longitude : </Label>\n                        <Control value={user.address.geo.lng} disabled />\n                    </Group>\n                </Card.Body>\n            </Card>\n            <Card> \n                <Card.Body>\n                    <Card.Title>Company Information</Card.Title>\n                    \n                    <Group as={Col} md={3}>\n                        <Label>Name : </Label>\n                        <Control value={user.company.name} disabled />\n                    </Group>\n                    <Group as={Col} md={3}>\n                        <Label>Catch Phrase : </Label>\n                        <Control value={user.company.catchPhrase} disabled />\n                    </Group>\n                    <Group as={Col} md={3}>\n                        <Label>BS : </Label>\n                        <Control value={user.company.bs} disabled />\n                    </Group>\n                </Card.Body>\n            </Card>\n        </Container>\n    )\n}\n\nUsersDetail.displayName = 'UsersDetail';\nexport default withRouter(UsersDetail);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport UsersList from '../pages/users/list';\nimport UserDetail from '../pages/users/detail';\n\nconst MainRoutes = () => {\n    return (\n        <Switch>\n            <Route path=\"/\" exact component={UsersList} />\n            <Route path=\"/:id\" exact component={UserDetail} />\n        </Switch>\n    );\n};\n\nMainRoutes.displayName = 'MainRoutes';\nexport default MainRoutes;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Navbar } from 'react-bootstrap';\nimport MainRoutes from './routes/main';\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <Router>\n      <Navbar bg=\"dark\" variant=\"dark\" className=\"text-white\">\n        User Log\n      </Navbar>\n      <MainRoutes />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport create from './store';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\n\n// https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/basic-column-toggle.html\n\nconst store = create({});\n\nconst Root = () => {\n    return (\n        <React.StrictMode>\n          <Provider store={store}>\n            <App />\n          </Provider>\n      </React.StrictMode>\n    )\n}\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}